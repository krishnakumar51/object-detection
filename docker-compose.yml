version: '3.8'

services:
  webrtc-server:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - USE_NGROK=${USE_NGROK:-true}
      - PORT=8000
      - SIGNALING_INTERNAL_URL=http://webrtc-server:8000
      - SSL_ENABLED=true
    volumes:
      - ./metrics:/app/metrics
      - ./certs:/app/certs
    networks:
      - webrtc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  ngrok:
    image: ngrok/ngrok:latest
    env_file:
      - .env
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command:
      - start
      - --all
      - --config
      - /ngrok.yml
    volumes:
      - ./ngrok.yml:/ngrok.yml:ro
    depends_on:
      - webrtc-server
    ports:
      - "4040:4040"
    networks:
      - webrtc-network
    restart: unless-stopped
    # Disabled health check as ngrok container doesn't have curl/wget
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4040/api/tunnels"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 20s

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SIGNALING_SERVER_URL=http://webrtc-server:8000
      - NEXT_PUBLIC_MODE=${MODE:-wasm}
      - WS_ENABLED=true
      - NEXT_PUBLIC_NGROK_URL=${NEXT_PUBLIC_NGROK_URL:-}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL:-}
      - NEXT_PUBLIC_USE_NGROK=${USE_NGROK:-true}
      - USE_NGROK=${USE_NGROK:-true}
    depends_on:
      webrtc-server:
        condition: service_healthy
      ngrok:
        condition: service_started
    volumes:
      - ./metrics:/app/metrics
    networks:
      - webrtc-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  webrtc-network:
    driver: bridge
